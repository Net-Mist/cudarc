/* automatically generated by rust-bindgen 0.69.4 */

pub const CUDA_VERSION: u32 = 12060;
pub type wchar_t = ::core::ffi::c_int;
pub type nvtxRangeId_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvtxDomainRegistration_st {
    _unused: [u8; 0],
}
pub type nvtxDomainRegistration = nvtxDomainRegistration_st;
pub type nvtxDomainHandle_t = *mut nvtxDomainRegistration;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvtxStringRegistration_st {
    _unused: [u8; 0],
}
pub type nvtxStringRegistration = nvtxStringRegistration_st;
pub type nvtxStringHandle_t = *mut nvtxStringRegistration;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum nvtxColorType_t {
    NVTX_COLOR_UNKNOWN = 0,
    NVTX_COLOR_ARGB = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum nvtxMessageType_t {
    NVTX_MESSAGE_UNKNOWN = 0,
    NVTX_MESSAGE_TYPE_ASCII = 1,
    NVTX_MESSAGE_TYPE_UNICODE = 2,
    NVTX_MESSAGE_TYPE_REGISTERED = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nvtxMessageValue_t {
    pub ascii: *const ::core::ffi::c_char,
    pub unicode: *const wchar_t,
    pub registered: nvtxStringHandle_t,
}
#[test]
fn bindgen_test_layout_nvtxMessageValue_t() {
    const UNINIT: ::core::mem::MaybeUninit<nvtxMessageValue_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<nvtxMessageValue_t>(),
        8usize,
        concat!("Size of: ", stringify!(nvtxMessageValue_t))
    );
    assert_eq!(
        ::core::mem::align_of::<nvtxMessageValue_t>(),
        8usize,
        concat!("Alignment of ", stringify!(nvtxMessageValue_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ascii) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxMessageValue_t),
            "::",
            stringify!(ascii)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).unicode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxMessageValue_t),
            "::",
            stringify!(unicode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).registered) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxMessageValue_t),
            "::",
            stringify!(registered)
        )
    );
}
impl Default for nvtxMessageValue_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[link_name = "nvtxInitialize__extern"]
    pub fn nvtxInitialize(reserved: *const ::core::ffi::c_void);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum nvtxPayloadType_t {
    NVTX_PAYLOAD_UNKNOWN = 0,
    NVTX_PAYLOAD_TYPE_UNSIGNED_INT64 = 1,
    NVTX_PAYLOAD_TYPE_INT64 = 2,
    NVTX_PAYLOAD_TYPE_DOUBLE = 3,
    NVTX_PAYLOAD_TYPE_UNSIGNED_INT32 = 4,
    NVTX_PAYLOAD_TYPE_INT32 = 5,
    NVTX_PAYLOAD_TYPE_FLOAT = 6,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvtxEventAttributes_v2 {
    pub version: u16,
    pub size: u16,
    pub category: u32,
    pub colorType: i32,
    pub color: u32,
    pub payloadType: i32,
    pub reserved0: i32,
    pub payload: nvtxEventAttributes_v2_payload_t,
    pub messageType: i32,
    pub message: nvtxMessageValue_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nvtxEventAttributes_v2_payload_t {
    pub ullValue: u64,
    pub llValue: i64,
    pub dValue: f64,
    pub uiValue: u32,
    pub iValue: i32,
    pub fValue: f32,
}
#[test]
fn bindgen_test_layout_nvtxEventAttributes_v2_payload_t() {
    const UNINIT: ::core::mem::MaybeUninit<nvtxEventAttributes_v2_payload_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<nvtxEventAttributes_v2_payload_t>(),
        8usize,
        concat!("Size of: ", stringify!(nvtxEventAttributes_v2_payload_t))
    );
    assert_eq!(
        ::core::mem::align_of::<nvtxEventAttributes_v2_payload_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(nvtxEventAttributes_v2_payload_t)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ullValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2_payload_t),
            "::",
            stringify!(ullValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).llValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2_payload_t),
            "::",
            stringify!(llValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2_payload_t),
            "::",
            stringify!(dValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uiValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2_payload_t),
            "::",
            stringify!(uiValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).iValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2_payload_t),
            "::",
            stringify!(iValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2_payload_t),
            "::",
            stringify!(fValue)
        )
    );
}
impl Default for nvtxEventAttributes_v2_payload_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_nvtxEventAttributes_v2() {
    const UNINIT: ::core::mem::MaybeUninit<nvtxEventAttributes_v2> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<nvtxEventAttributes_v2>(),
        48usize,
        concat!("Size of: ", stringify!(nvtxEventAttributes_v2))
    );
    assert_eq!(
        ::core::mem::align_of::<nvtxEventAttributes_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(nvtxEventAttributes_v2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).category) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(category)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).colorType) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(colorType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).payloadType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(payloadType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved0) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(reserved0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).payload) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(payload)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).messageType) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(messageType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(message)
        )
    );
}
impl Default for nvtxEventAttributes_v2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type nvtxEventAttributes_t = nvtxEventAttributes_v2;
extern "C" {
    #[link_name = "nvtxDomainMarkEx__extern"]
    pub fn nvtxDomainMarkEx(domain: nvtxDomainHandle_t, eventAttrib: *const nvtxEventAttributes_t);
}
extern "C" {
    #[link_name = "nvtxMarkEx__extern"]
    pub fn nvtxMarkEx(eventAttrib: *const nvtxEventAttributes_t);
}
extern "C" {
    #[link_name = "nvtxMarkA__extern"]
    pub fn nvtxMarkA(message: *const ::core::ffi::c_char);
}
extern "C" {
    #[link_name = "nvtxMarkW__extern"]
    pub fn nvtxMarkW(message: *const wchar_t);
}
extern "C" {
    #[link_name = "nvtxDomainRangeStartEx__extern"]
    pub fn nvtxDomainRangeStartEx(
        domain: nvtxDomainHandle_t,
        eventAttrib: *const nvtxEventAttributes_t,
    ) -> nvtxRangeId_t;
}
extern "C" {
    #[link_name = "nvtxRangeStartEx__extern"]
    pub fn nvtxRangeStartEx(eventAttrib: *const nvtxEventAttributes_t) -> nvtxRangeId_t;
}
extern "C" {
    #[link_name = "nvtxRangeStartA__extern"]
    pub fn nvtxRangeStartA(message: *const ::core::ffi::c_char) -> nvtxRangeId_t;
}
extern "C" {
    #[link_name = "nvtxRangeStartW__extern"]
    pub fn nvtxRangeStartW(message: *const wchar_t) -> nvtxRangeId_t;
}
extern "C" {
    #[link_name = "nvtxDomainRangeEnd__extern"]
    pub fn nvtxDomainRangeEnd(domain: nvtxDomainHandle_t, id: nvtxRangeId_t);
}
extern "C" {
    #[link_name = "nvtxRangeEnd__extern"]
    pub fn nvtxRangeEnd(id: nvtxRangeId_t);
}
extern "C" {
    #[link_name = "nvtxDomainRangePushEx__extern"]
    pub fn nvtxDomainRangePushEx(
        domain: nvtxDomainHandle_t,
        eventAttrib: *const nvtxEventAttributes_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "nvtxRangePushEx__extern"]
    pub fn nvtxRangePushEx(eventAttrib: *const nvtxEventAttributes_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "nvtxRangePushA__extern"]
    pub fn nvtxRangePushA(message: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "nvtxRangePushW__extern"]
    pub fn nvtxRangePushW(message: *const wchar_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "nvtxDomainRangePop__extern"]
    pub fn nvtxDomainRangePop(domain: nvtxDomainHandle_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "nvtxRangePop__extern"]
    pub fn nvtxRangePop() -> ::core::ffi::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum nvtxResourceGenericType_t {
    NVTX_RESOURCE_TYPE_UNKNOWN = 0,
    NVTX_RESOURCE_TYPE_GENERIC_POINTER = 65537,
    NVTX_RESOURCE_TYPE_GENERIC_HANDLE = 65538,
    NVTX_RESOURCE_TYPE_GENERIC_THREAD_NATIVE = 65539,
    NVTX_RESOURCE_TYPE_GENERIC_THREAD_POSIX = 65540,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvtxResourceAttributes_v0 {
    pub version: u16,
    pub size: u16,
    pub identifierType: i32,
    pub identifier: nvtxResourceAttributes_v0_identifier_t,
    pub messageType: i32,
    pub message: nvtxMessageValue_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nvtxResourceAttributes_v0_identifier_t {
    pub pValue: *const ::core::ffi::c_void,
    pub ullValue: u64,
}
#[test]
fn bindgen_test_layout_nvtxResourceAttributes_v0_identifier_t() {
    const UNINIT: ::core::mem::MaybeUninit<nvtxResourceAttributes_v0_identifier_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<nvtxResourceAttributes_v0_identifier_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(nvtxResourceAttributes_v0_identifier_t)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<nvtxResourceAttributes_v0_identifier_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(nvtxResourceAttributes_v0_identifier_t)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0_identifier_t),
            "::",
            stringify!(pValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ullValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0_identifier_t),
            "::",
            stringify!(ullValue)
        )
    );
}
impl Default for nvtxResourceAttributes_v0_identifier_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_nvtxResourceAttributes_v0() {
    const UNINIT: ::core::mem::MaybeUninit<nvtxResourceAttributes_v0> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<nvtxResourceAttributes_v0>(),
        32usize,
        concat!("Size of: ", stringify!(nvtxResourceAttributes_v0))
    );
    assert_eq!(
        ::core::mem::align_of::<nvtxResourceAttributes_v0>(),
        8usize,
        concat!("Alignment of ", stringify!(nvtxResourceAttributes_v0))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).identifierType) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0),
            "::",
            stringify!(identifierType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).messageType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0),
            "::",
            stringify!(messageType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0),
            "::",
            stringify!(message)
        )
    );
}
impl Default for nvtxResourceAttributes_v0 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type nvtxResourceAttributes_t = nvtxResourceAttributes_v0;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvtxResourceHandle {
    _unused: [u8; 0],
}
pub type nvtxResourceHandle_t = *mut nvtxResourceHandle;
extern "C" {
    #[link_name = "nvtxDomainResourceCreate__extern"]
    pub fn nvtxDomainResourceCreate(
        domain: nvtxDomainHandle_t,
        attribs: *mut nvtxResourceAttributes_t,
    ) -> nvtxResourceHandle_t;
}
extern "C" {
    #[link_name = "nvtxDomainResourceDestroy__extern"]
    pub fn nvtxDomainResourceDestroy(resource: nvtxResourceHandle_t);
}
extern "C" {
    #[link_name = "nvtxDomainNameCategoryA__extern"]
    pub fn nvtxDomainNameCategoryA(
        domain: nvtxDomainHandle_t,
        category: u32,
        name: *const ::core::ffi::c_char,
    );
}
extern "C" {
    #[link_name = "nvtxDomainNameCategoryW__extern"]
    pub fn nvtxDomainNameCategoryW(domain: nvtxDomainHandle_t, category: u32, name: *const wchar_t);
}
extern "C" {
    #[link_name = "nvtxNameCategoryA__extern"]
    pub fn nvtxNameCategoryA(category: u32, name: *const ::core::ffi::c_char);
}
extern "C" {
    #[link_name = "nvtxNameCategoryW__extern"]
    pub fn nvtxNameCategoryW(category: u32, name: *const wchar_t);
}
extern "C" {
    #[link_name = "nvtxNameOsThreadA__extern"]
    pub fn nvtxNameOsThreadA(threadId: u32, name: *const ::core::ffi::c_char);
}
extern "C" {
    #[link_name = "nvtxNameOsThreadW__extern"]
    pub fn nvtxNameOsThreadW(threadId: u32, name: *const wchar_t);
}
extern "C" {
    #[link_name = "nvtxDomainRegisterStringA__extern"]
    pub fn nvtxDomainRegisterStringA(
        domain: nvtxDomainHandle_t,
        string: *const ::core::ffi::c_char,
    ) -> nvtxStringHandle_t;
}
extern "C" {
    #[link_name = "nvtxDomainRegisterStringW__extern"]
    pub fn nvtxDomainRegisterStringW(
        domain: nvtxDomainHandle_t,
        string: *const wchar_t,
    ) -> nvtxStringHandle_t;
}
extern "C" {
    #[link_name = "nvtxDomainCreateA__extern"]
    pub fn nvtxDomainCreateA(name: *const ::core::ffi::c_char) -> nvtxDomainHandle_t;
}
extern "C" {
    #[link_name = "nvtxDomainCreateW__extern"]
    pub fn nvtxDomainCreateW(name: *const wchar_t) -> nvtxDomainHandle_t;
}
extern "C" {
    #[link_name = "nvtxDomainDestroy__extern"]
    pub fn nvtxDomainDestroy(domain: nvtxDomainHandle_t);
}
pub type nvtx_CUdevice = ::core::ffi::c_int;
pub type nvtx_CUcontext = *mut ::core::ffi::c_void;
pub type nvtx_CUstream = *mut ::core::ffi::c_void;
pub type nvtx_CUevent = *mut ::core::ffi::c_void;
pub type nvtx_cudaStream_t = *mut ::core::ffi::c_void;
pub type nvtx_cudaEvent_t = *mut ::core::ffi::c_void;
pub type nvtx_cl_platform_id = *mut ::core::ffi::c_void;
pub type nvtx_cl_device_id = *mut ::core::ffi::c_void;
pub type nvtx_cl_context = *mut ::core::ffi::c_void;
pub type nvtx_cl_command_queue = *mut ::core::ffi::c_void;
pub type nvtx_cl_mem = *mut ::core::ffi::c_void;
pub type nvtx_cl_program = *mut ::core::ffi::c_void;
pub type nvtx_cl_kernel = *mut ::core::ffi::c_void;
pub type nvtx_cl_event = *mut ::core::ffi::c_void;
pub type nvtx_cl_sampler = *mut ::core::ffi::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvtxSyncUser {
    _unused: [u8; 0],
}
pub type nvtxSyncUser_t = *mut nvtxSyncUser;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvtxSyncUserAttributes_v0 {
    _unused: [u8; 0],
}
pub type nvtxSyncUserAttributes_t = nvtxSyncUserAttributes_v0;
pub type nvtxMarkEx_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(eventAttrib: *const nvtxEventAttributes_t)>;
pub type nvtxMarkA_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(message: *const ::core::ffi::c_char)>;
pub type nvtxMarkW_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(message: *const wchar_t)>;
pub type nvtxRangeStartEx_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(eventAttrib: *const nvtxEventAttributes_t) -> nvtxRangeId_t,
>;
pub type nvtxRangeStartA_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(message: *const ::core::ffi::c_char) -> nvtxRangeId_t,
>;
pub type nvtxRangeStartW_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(message: *const wchar_t) -> nvtxRangeId_t>;
pub type nvtxRangeEnd_impl_fntype = ::core::option::Option<unsafe extern "C" fn(id: nvtxRangeId_t)>;
pub type nvtxRangePushEx_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(eventAttrib: *const nvtxEventAttributes_t) -> ::core::ffi::c_int,
>;
pub type nvtxRangePushA_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(message: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
>;
pub type nvtxRangePushW_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(message: *const wchar_t) -> ::core::ffi::c_int>;
pub type nvtxRangePop_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>;
pub type nvtxNameCategoryA_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(category: u32, name: *const ::core::ffi::c_char)>;
pub type nvtxNameCategoryW_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(category: u32, name: *const wchar_t)>;
pub type nvtxNameOsThreadA_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(threadId: u32, name: *const ::core::ffi::c_char)>;
pub type nvtxNameOsThreadW_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(threadId: u32, name: *const wchar_t)>;
pub type nvtxNameCuDeviceA_fakeimpl_fntype = ::core::option::Option<
    unsafe extern "C" fn(device: nvtx_CUdevice, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameCuDeviceW_fakeimpl_fntype =
    ::core::option::Option<unsafe extern "C" fn(device: nvtx_CUdevice, name: *const wchar_t)>;
pub type nvtxNameCuContextA_fakeimpl_fntype = ::core::option::Option<
    unsafe extern "C" fn(context: nvtx_CUcontext, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameCuContextW_fakeimpl_fntype =
    ::core::option::Option<unsafe extern "C" fn(context: nvtx_CUcontext, name: *const wchar_t)>;
pub type nvtxNameCuStreamA_fakeimpl_fntype = ::core::option::Option<
    unsafe extern "C" fn(stream: nvtx_CUstream, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameCuStreamW_fakeimpl_fntype =
    ::core::option::Option<unsafe extern "C" fn(stream: nvtx_CUstream, name: *const wchar_t)>;
pub type nvtxNameCuEventA_fakeimpl_fntype = ::core::option::Option<
    unsafe extern "C" fn(event: nvtx_CUevent, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameCuEventW_fakeimpl_fntype =
    ::core::option::Option<unsafe extern "C" fn(event: nvtx_CUevent, name: *const wchar_t)>;
pub type nvtxNameClDeviceA_fakeimpl_fntype = ::core::option::Option<
    unsafe extern "C" fn(device: nvtx_cl_device_id, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameClDeviceW_fakeimpl_fntype =
    ::core::option::Option<unsafe extern "C" fn(device: nvtx_cl_device_id, name: *const wchar_t)>;
pub type nvtxNameClContextA_fakeimpl_fntype = ::core::option::Option<
    unsafe extern "C" fn(context: nvtx_cl_context, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameClContextW_fakeimpl_fntype =
    ::core::option::Option<unsafe extern "C" fn(context: nvtx_cl_context, name: *const wchar_t)>;
pub type nvtxNameClCommandQueueA_fakeimpl_fntype = ::core::option::Option<
    unsafe extern "C" fn(command_queue: nvtx_cl_command_queue, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameClCommandQueueW_fakeimpl_fntype = ::core::option::Option<
    unsafe extern "C" fn(command_queue: nvtx_cl_command_queue, name: *const wchar_t),
>;
pub type nvtxNameClMemObjectA_fakeimpl_fntype = ::core::option::Option<
    unsafe extern "C" fn(memobj: nvtx_cl_mem, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameClMemObjectW_fakeimpl_fntype =
    ::core::option::Option<unsafe extern "C" fn(memobj: nvtx_cl_mem, name: *const wchar_t)>;
pub type nvtxNameClSamplerA_fakeimpl_fntype = ::core::option::Option<
    unsafe extern "C" fn(sampler: nvtx_cl_sampler, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameClSamplerW_fakeimpl_fntype =
    ::core::option::Option<unsafe extern "C" fn(sampler: nvtx_cl_sampler, name: *const wchar_t)>;
pub type nvtxNameClProgramA_fakeimpl_fntype = ::core::option::Option<
    unsafe extern "C" fn(program: nvtx_cl_program, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameClProgramW_fakeimpl_fntype =
    ::core::option::Option<unsafe extern "C" fn(program: nvtx_cl_program, name: *const wchar_t)>;
pub type nvtxNameClEventA_fakeimpl_fntype = ::core::option::Option<
    unsafe extern "C" fn(evnt: nvtx_cl_event, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameClEventW_fakeimpl_fntype =
    ::core::option::Option<unsafe extern "C" fn(evnt: nvtx_cl_event, name: *const wchar_t)>;
pub type nvtxNameCudaDeviceA_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(device: ::core::ffi::c_int, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameCudaDeviceW_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(device: ::core::ffi::c_int, name: *const wchar_t)>;
pub type nvtxNameCudaStreamA_fakeimpl_fntype = ::core::option::Option<
    unsafe extern "C" fn(stream: nvtx_cudaStream_t, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameCudaStreamW_fakeimpl_fntype =
    ::core::option::Option<unsafe extern "C" fn(stream: nvtx_cudaStream_t, name: *const wchar_t)>;
pub type nvtxNameCudaEventA_fakeimpl_fntype = ::core::option::Option<
    unsafe extern "C" fn(event: nvtx_cudaEvent_t, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameCudaEventW_fakeimpl_fntype =
    ::core::option::Option<unsafe extern "C" fn(event: nvtx_cudaEvent_t, name: *const wchar_t)>;
pub type nvtxDomainMarkEx_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(domain: nvtxDomainHandle_t, eventAttrib: *const nvtxEventAttributes_t),
>;
pub type nvtxDomainRangeStartEx_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(
        domain: nvtxDomainHandle_t,
        eventAttrib: *const nvtxEventAttributes_t,
    ) -> nvtxRangeId_t,
>;
pub type nvtxDomainRangeEnd_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(domain: nvtxDomainHandle_t, id: nvtxRangeId_t)>;
pub type nvtxDomainRangePushEx_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(
        domain: nvtxDomainHandle_t,
        eventAttrib: *const nvtxEventAttributes_t,
    ) -> ::core::ffi::c_int,
>;
pub type nvtxDomainRangePop_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(domain: nvtxDomainHandle_t) -> ::core::ffi::c_int>;
pub type nvtxDomainResourceCreate_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(
        domain: nvtxDomainHandle_t,
        attribs: *mut nvtxResourceAttributes_t,
    ) -> nvtxResourceHandle_t,
>;
pub type nvtxDomainResourceDestroy_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(resource: nvtxResourceHandle_t)>;
pub type nvtxDomainNameCategoryA_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(
        domain: nvtxDomainHandle_t,
        category: u32,
        name: *const ::core::ffi::c_char,
    ),
>;
pub type nvtxDomainNameCategoryW_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(domain: nvtxDomainHandle_t, category: u32, name: *const wchar_t),
>;
pub type nvtxDomainRegisterStringA_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(
        domain: nvtxDomainHandle_t,
        string: *const ::core::ffi::c_char,
    ) -> nvtxStringHandle_t,
>;
pub type nvtxDomainRegisterStringW_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(domain: nvtxDomainHandle_t, string: *const wchar_t) -> nvtxStringHandle_t,
>;
pub type nvtxDomainCreateA_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(message: *const ::core::ffi::c_char) -> nvtxDomainHandle_t,
>;
pub type nvtxDomainCreateW_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(message: *const wchar_t) -> nvtxDomainHandle_t>;
pub type nvtxDomainDestroy_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(domain: nvtxDomainHandle_t)>;
pub type nvtxInitialize_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(reserved: *const ::core::ffi::c_void)>;
pub type nvtxDomainSyncUserCreate_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(
        domain: nvtxDomainHandle_t,
        attribs: *const nvtxSyncUserAttributes_t,
    ) -> nvtxSyncUser_t,
>;
pub type nvtxDomainSyncUserDestroy_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(handle: nvtxSyncUser_t)>;
pub type nvtxDomainSyncUserAcquireStart_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(handle: nvtxSyncUser_t)>;
pub type nvtxDomainSyncUserAcquireFailed_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(handle: nvtxSyncUser_t)>;
pub type nvtxDomainSyncUserAcquireSuccess_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(handle: nvtxSyncUser_t)>;
pub type nvtxDomainSyncUserReleasing_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(handle: nvtxSyncUser_t)>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum NvtxCallbackModule {
    NVTX_CB_MODULE_INVALID = 0,
    NVTX_CB_MODULE_CORE = 1,
    NVTX_CB_MODULE_CUDA = 2,
    NVTX_CB_MODULE_OPENCL = 3,
    NVTX_CB_MODULE_CUDART = 4,
    NVTX_CB_MODULE_CORE2 = 5,
    NVTX_CB_MODULE_SYNC = 6,
    NVTX_CB_MODULE_SIZE = 7,
    NVTX_CB_MODULE_FORCE_INT = 2147483647,
}
pub type NvtxFunctionPointer = ::core::option::Option<unsafe extern "C" fn()>;
pub type NvtxFunctionTable = *mut *mut NvtxFunctionPointer;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct NvtxExportTableCallbacks {
    pub struct_size: usize,
    pub GetModuleFunctionTable: ::core::option::Option<
        unsafe extern "C" fn(
            module: NvtxCallbackModule,
            out_table: *mut NvtxFunctionTable,
            out_size: *mut ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int,
    >,
}
#[test]
fn bindgen_test_layout_NvtxExportTableCallbacks() {
    const UNINIT: ::core::mem::MaybeUninit<NvtxExportTableCallbacks> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NvtxExportTableCallbacks>(),
        16usize,
        concat!("Size of: ", stringify!(NvtxExportTableCallbacks))
    );
    assert_eq!(
        ::core::mem::align_of::<NvtxExportTableCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(NvtxExportTableCallbacks))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).struct_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NvtxExportTableCallbacks),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GetModuleFunctionTable) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NvtxExportTableCallbacks),
            "::",
            stringify!(GetModuleFunctionTable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct NvtxExportTableVersionInfo {
    pub struct_size: usize,
    pub version: u32,
    pub reserved0: u32,
    pub SetInjectionNvtxVersion: ::core::option::Option<unsafe extern "C" fn(version: u32)>,
}
#[test]
fn bindgen_test_layout_NvtxExportTableVersionInfo() {
    const UNINIT: ::core::mem::MaybeUninit<NvtxExportTableVersionInfo> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NvtxExportTableVersionInfo>(),
        24usize,
        concat!("Size of: ", stringify!(NvtxExportTableVersionInfo))
    );
    assert_eq!(
        ::core::mem::align_of::<NvtxExportTableVersionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(NvtxExportTableVersionInfo))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).struct_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NvtxExportTableVersionInfo),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NvtxExportTableVersionInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NvtxExportTableVersionInfo),
            "::",
            stringify!(reserved0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SetInjectionNvtxVersion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NvtxExportTableVersionInfo),
            "::",
            stringify!(SetInjectionNvtxVersion)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct nvtxGlobals_t {
    pub initState: ::core::ffi::c_uint,
    pub etblCallbacks: NvtxExportTableCallbacks,
    pub etblVersionInfo: NvtxExportTableVersionInfo,
    pub nvtxMarkEx_impl_fnptr: nvtxMarkEx_impl_fntype,
    pub nvtxMarkA_impl_fnptr: nvtxMarkA_impl_fntype,
    pub nvtxMarkW_impl_fnptr: nvtxMarkW_impl_fntype,
    pub nvtxRangeStartEx_impl_fnptr: nvtxRangeStartEx_impl_fntype,
    pub nvtxRangeStartA_impl_fnptr: nvtxRangeStartA_impl_fntype,
    pub nvtxRangeStartW_impl_fnptr: nvtxRangeStartW_impl_fntype,
    pub nvtxRangeEnd_impl_fnptr: nvtxRangeEnd_impl_fntype,
    pub nvtxRangePushEx_impl_fnptr: nvtxRangePushEx_impl_fntype,
    pub nvtxRangePushA_impl_fnptr: nvtxRangePushA_impl_fntype,
    pub nvtxRangePushW_impl_fnptr: nvtxRangePushW_impl_fntype,
    pub nvtxRangePop_impl_fnptr: nvtxRangePop_impl_fntype,
    pub nvtxNameCategoryA_impl_fnptr: nvtxNameCategoryA_impl_fntype,
    pub nvtxNameCategoryW_impl_fnptr: nvtxNameCategoryW_impl_fntype,
    pub nvtxNameOsThreadA_impl_fnptr: nvtxNameOsThreadA_impl_fntype,
    pub nvtxNameOsThreadW_impl_fnptr: nvtxNameOsThreadW_impl_fntype,
    pub nvtxNameCuDeviceA_impl_fnptr: nvtxNameCuDeviceA_fakeimpl_fntype,
    pub nvtxNameCuDeviceW_impl_fnptr: nvtxNameCuDeviceW_fakeimpl_fntype,
    pub nvtxNameCuContextA_impl_fnptr: nvtxNameCuContextA_fakeimpl_fntype,
    pub nvtxNameCuContextW_impl_fnptr: nvtxNameCuContextW_fakeimpl_fntype,
    pub nvtxNameCuStreamA_impl_fnptr: nvtxNameCuStreamA_fakeimpl_fntype,
    pub nvtxNameCuStreamW_impl_fnptr: nvtxNameCuStreamW_fakeimpl_fntype,
    pub nvtxNameCuEventA_impl_fnptr: nvtxNameCuEventA_fakeimpl_fntype,
    pub nvtxNameCuEventW_impl_fnptr: nvtxNameCuEventW_fakeimpl_fntype,
    pub nvtxNameClDeviceA_impl_fnptr: nvtxNameClDeviceA_fakeimpl_fntype,
    pub nvtxNameClDeviceW_impl_fnptr: nvtxNameClDeviceW_fakeimpl_fntype,
    pub nvtxNameClContextA_impl_fnptr: nvtxNameClContextA_fakeimpl_fntype,
    pub nvtxNameClContextW_impl_fnptr: nvtxNameClContextW_fakeimpl_fntype,
    pub nvtxNameClCommandQueueA_impl_fnptr: nvtxNameClCommandQueueA_fakeimpl_fntype,
    pub nvtxNameClCommandQueueW_impl_fnptr: nvtxNameClCommandQueueW_fakeimpl_fntype,
    pub nvtxNameClMemObjectA_impl_fnptr: nvtxNameClMemObjectA_fakeimpl_fntype,
    pub nvtxNameClMemObjectW_impl_fnptr: nvtxNameClMemObjectW_fakeimpl_fntype,
    pub nvtxNameClSamplerA_impl_fnptr: nvtxNameClSamplerA_fakeimpl_fntype,
    pub nvtxNameClSamplerW_impl_fnptr: nvtxNameClSamplerW_fakeimpl_fntype,
    pub nvtxNameClProgramA_impl_fnptr: nvtxNameClProgramA_fakeimpl_fntype,
    pub nvtxNameClProgramW_impl_fnptr: nvtxNameClProgramW_fakeimpl_fntype,
    pub nvtxNameClEventA_impl_fnptr: nvtxNameClEventA_fakeimpl_fntype,
    pub nvtxNameClEventW_impl_fnptr: nvtxNameClEventW_fakeimpl_fntype,
    pub nvtxNameCudaDeviceA_impl_fnptr: nvtxNameCudaDeviceA_impl_fntype,
    pub nvtxNameCudaDeviceW_impl_fnptr: nvtxNameCudaDeviceW_impl_fntype,
    pub nvtxNameCudaStreamA_impl_fnptr: nvtxNameCudaStreamA_fakeimpl_fntype,
    pub nvtxNameCudaStreamW_impl_fnptr: nvtxNameCudaStreamW_fakeimpl_fntype,
    pub nvtxNameCudaEventA_impl_fnptr: nvtxNameCudaEventA_fakeimpl_fntype,
    pub nvtxNameCudaEventW_impl_fnptr: nvtxNameCudaEventW_fakeimpl_fntype,
    pub nvtxDomainMarkEx_impl_fnptr: nvtxDomainMarkEx_impl_fntype,
    pub nvtxDomainRangeStartEx_impl_fnptr: nvtxDomainRangeStartEx_impl_fntype,
    pub nvtxDomainRangeEnd_impl_fnptr: nvtxDomainRangeEnd_impl_fntype,
    pub nvtxDomainRangePushEx_impl_fnptr: nvtxDomainRangePushEx_impl_fntype,
    pub nvtxDomainRangePop_impl_fnptr: nvtxDomainRangePop_impl_fntype,
    pub nvtxDomainResourceCreate_impl_fnptr: nvtxDomainResourceCreate_impl_fntype,
    pub nvtxDomainResourceDestroy_impl_fnptr: nvtxDomainResourceDestroy_impl_fntype,
    pub nvtxDomainNameCategoryA_impl_fnptr: nvtxDomainNameCategoryA_impl_fntype,
    pub nvtxDomainNameCategoryW_impl_fnptr: nvtxDomainNameCategoryW_impl_fntype,
    pub nvtxDomainRegisterStringA_impl_fnptr: nvtxDomainRegisterStringA_impl_fntype,
    pub nvtxDomainRegisterStringW_impl_fnptr: nvtxDomainRegisterStringW_impl_fntype,
    pub nvtxDomainCreateA_impl_fnptr: nvtxDomainCreateA_impl_fntype,
    pub nvtxDomainCreateW_impl_fnptr: nvtxDomainCreateW_impl_fntype,
    pub nvtxDomainDestroy_impl_fnptr: nvtxDomainDestroy_impl_fntype,
    pub nvtxInitialize_impl_fnptr: nvtxInitialize_impl_fntype,
    pub nvtxDomainSyncUserCreate_impl_fnptr: nvtxDomainSyncUserCreate_impl_fntype,
    pub nvtxDomainSyncUserDestroy_impl_fnptr: nvtxDomainSyncUserDestroy_impl_fntype,
    pub nvtxDomainSyncUserAcquireStart_impl_fnptr: nvtxDomainSyncUserAcquireStart_impl_fntype,
    pub nvtxDomainSyncUserAcquireFailed_impl_fnptr: nvtxDomainSyncUserAcquireFailed_impl_fntype,
    pub nvtxDomainSyncUserAcquireSuccess_impl_fnptr: nvtxDomainSyncUserAcquireSuccess_impl_fntype,
    pub nvtxDomainSyncUserReleasing_impl_fnptr: nvtxDomainSyncUserReleasing_impl_fntype,
    pub functionTable_CORE: [*mut NvtxFunctionPointer; 17usize],
    pub functionTable_CUDA: [*mut NvtxFunctionPointer; 10usize],
    pub functionTable_OPENCL: [*mut NvtxFunctionPointer; 16usize],
    pub functionTable_CUDART: [*mut NvtxFunctionPointer; 8usize],
    pub functionTable_CORE2: [*mut NvtxFunctionPointer; 17usize],
    pub functionTable_SYNC: [*mut NvtxFunctionPointer; 8usize],
}
#[test]
fn bindgen_test_layout_nvtxGlobals_t() {
    const UNINIT: ::core::mem::MaybeUninit<nvtxGlobals_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<nvtxGlobals_t>(),
        1168usize,
        concat!("Size of: ", stringify!(nvtxGlobals_t))
    );
    assert_eq!(
        ::core::mem::align_of::<nvtxGlobals_t>(),
        8usize,
        concat!("Alignment of ", stringify!(nvtxGlobals_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).initState) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(initState)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).etblCallbacks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(etblCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).etblVersionInfo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(etblVersionInfo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvtxMarkEx_impl_fnptr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxMarkEx_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvtxMarkA_impl_fnptr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxMarkA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvtxMarkW_impl_fnptr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxMarkW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxRangeStartEx_impl_fnptr) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxRangeStartEx_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvtxRangeStartA_impl_fnptr) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxRangeStartA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvtxRangeStartW_impl_fnptr) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxRangeStartW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvtxRangeEnd_impl_fnptr) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxRangeEnd_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvtxRangePushEx_impl_fnptr) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxRangePushEx_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvtxRangePushA_impl_fnptr) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxRangePushA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvtxRangePushW_impl_fnptr) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxRangePushW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvtxRangePop_impl_fnptr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxRangePop_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCategoryA_impl_fnptr) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCategoryA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCategoryW_impl_fnptr) as usize - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCategoryW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameOsThreadA_impl_fnptr) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameOsThreadA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameOsThreadW_impl_fnptr) as usize - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameOsThreadW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCuDeviceA_impl_fnptr) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCuDeviceA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCuDeviceW_impl_fnptr) as usize - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCuDeviceW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCuContextA_impl_fnptr) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCuContextA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCuContextW_impl_fnptr) as usize - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCuContextW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCuStreamA_impl_fnptr) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCuStreamA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCuStreamW_impl_fnptr) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCuStreamW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCuEventA_impl_fnptr) as usize - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCuEventA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCuEventW_impl_fnptr) as usize - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCuEventW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameClDeviceA_impl_fnptr) as usize - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameClDeviceA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameClDeviceW_impl_fnptr) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameClDeviceW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameClContextA_impl_fnptr) as usize - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameClContextA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameClContextW_impl_fnptr) as usize - ptr as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameClContextW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameClCommandQueueA_impl_fnptr) as usize - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameClCommandQueueA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameClCommandQueueW_impl_fnptr) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameClCommandQueueW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameClMemObjectA_impl_fnptr) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameClMemObjectA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameClMemObjectW_impl_fnptr) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameClMemObjectW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameClSamplerA_impl_fnptr) as usize - ptr as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameClSamplerA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameClSamplerW_impl_fnptr) as usize - ptr as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameClSamplerW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameClProgramA_impl_fnptr) as usize - ptr as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameClProgramA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameClProgramW_impl_fnptr) as usize - ptr as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameClProgramW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameClEventA_impl_fnptr) as usize - ptr as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameClEventA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameClEventW_impl_fnptr) as usize - ptr as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameClEventW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCudaDeviceA_impl_fnptr) as usize - ptr as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCudaDeviceA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCudaDeviceW_impl_fnptr) as usize - ptr as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCudaDeviceW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCudaStreamA_impl_fnptr) as usize - ptr as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCudaStreamA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCudaStreamW_impl_fnptr) as usize - ptr as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCudaStreamW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCudaEventA_impl_fnptr) as usize - ptr as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCudaEventA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxNameCudaEventW_impl_fnptr) as usize - ptr as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxNameCudaEventW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainMarkEx_impl_fnptr) as usize - ptr as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainMarkEx_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainRangeStartEx_impl_fnptr) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainRangeStartEx_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainRangeEnd_impl_fnptr) as usize - ptr as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainRangeEnd_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainRangePushEx_impl_fnptr) as usize - ptr as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainRangePushEx_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainRangePop_impl_fnptr) as usize - ptr as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainRangePop_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainResourceCreate_impl_fnptr) as usize
                - ptr as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainResourceCreate_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainResourceDestroy_impl_fnptr) as usize
                - ptr as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainResourceDestroy_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainNameCategoryA_impl_fnptr) as usize - ptr as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainNameCategoryA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainNameCategoryW_impl_fnptr) as usize - ptr as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainNameCategoryW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainRegisterStringA_impl_fnptr) as usize
                - ptr as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainRegisterStringA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainRegisterStringW_impl_fnptr) as usize
                - ptr as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainRegisterStringW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainCreateA_impl_fnptr) as usize - ptr as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainCreateA_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainCreateW_impl_fnptr) as usize - ptr as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainCreateW_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainDestroy_impl_fnptr) as usize - ptr as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainDestroy_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nvtxInitialize_impl_fnptr) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxInitialize_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainSyncUserCreate_impl_fnptr) as usize
                - ptr as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainSyncUserCreate_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainSyncUserDestroy_impl_fnptr) as usize
                - ptr as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainSyncUserDestroy_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainSyncUserAcquireStart_impl_fnptr) as usize
                - ptr as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainSyncUserAcquireStart_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainSyncUserAcquireFailed_impl_fnptr) as usize
                - ptr as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainSyncUserAcquireFailed_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainSyncUserAcquireSuccess_impl_fnptr) as usize
                - ptr as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainSyncUserAcquireSuccess_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).nvtxDomainSyncUserReleasing_impl_fnptr) as usize
                - ptr as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(nvtxDomainSyncUserReleasing_impl_fnptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).functionTable_CORE) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(functionTable_CORE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).functionTable_CUDA) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(functionTable_CUDA)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).functionTable_OPENCL) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(functionTable_OPENCL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).functionTable_CUDART) as usize - ptr as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(functionTable_CUDART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).functionTable_CORE2) as usize - ptr as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(functionTable_CORE2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).functionTable_SYNC) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxGlobals_t),
            "::",
            stringify!(functionTable_SYNC)
        )
    );
}
impl Default for nvtxGlobals_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CUdevice_v1 = ::core::ffi::c_int;
pub type CUdevice = CUdevice_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUctx_st {
    _unused: [u8; 0],
}
pub type CUcontext = *mut CUctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUevent_st {
    _unused: [u8; 0],
}
pub type CUevent = *mut CUevent_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUstream_st {
    _unused: [u8; 0],
}
pub type CUstream = *mut CUstream_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum nvtxResourceCUDAType_t {
    NVTX_RESOURCE_TYPE_CUDA_DEVICE = 262145,
    NVTX_RESOURCE_TYPE_CUDA_CONTEXT = 262146,
    NVTX_RESOURCE_TYPE_CUDA_STREAM = 262147,
    NVTX_RESOURCE_TYPE_CUDA_EVENT = 262148,
}
extern "C" {
    #[link_name = "nvtxNameCuDeviceA__extern"]
    pub fn nvtxNameCuDeviceA(device: CUdevice, name: *const ::core::ffi::c_char);
}
extern "C" {
    #[link_name = "nvtxNameCuDeviceW__extern"]
    pub fn nvtxNameCuDeviceW(device: CUdevice, name: *const wchar_t);
}
extern "C" {
    #[link_name = "nvtxNameCuContextA__extern"]
    pub fn nvtxNameCuContextA(context: CUcontext, name: *const ::core::ffi::c_char);
}
extern "C" {
    #[link_name = "nvtxNameCuContextW__extern"]
    pub fn nvtxNameCuContextW(context: CUcontext, name: *const wchar_t);
}
extern "C" {
    #[link_name = "nvtxNameCuStreamA__extern"]
    pub fn nvtxNameCuStreamA(stream: CUstream, name: *const ::core::ffi::c_char);
}
extern "C" {
    #[link_name = "nvtxNameCuStreamW__extern"]
    pub fn nvtxNameCuStreamW(stream: CUstream, name: *const wchar_t);
}
extern "C" {
    #[link_name = "nvtxNameCuEventA__extern"]
    pub fn nvtxNameCuEventA(event: CUevent, name: *const ::core::ffi::c_char);
}
extern "C" {
    #[link_name = "nvtxNameCuEventW__extern"]
    pub fn nvtxNameCuEventW(event: CUevent, name: *const wchar_t);
}
pub type nvtxNameCuDeviceA_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(device: CUdevice, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameCuDeviceW_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(device: CUdevice, name: *const wchar_t)>;
pub type nvtxNameCuContextA_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(context: CUcontext, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameCuContextW_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(context: CUcontext, name: *const wchar_t)>;
pub type nvtxNameCuStreamA_impl_fntype = ::core::option::Option<
    unsafe extern "C" fn(stream: CUstream, name: *const ::core::ffi::c_char),
>;
pub type nvtxNameCuStreamW_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(stream: CUstream, name: *const wchar_t)>;
pub type nvtxNameCuEventA_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(event: CUevent, name: *const ::core::ffi::c_char)>;
pub type nvtxNameCuEventW_impl_fntype =
    ::core::option::Option<unsafe extern "C" fn(event: CUevent, name: *const wchar_t)>;
